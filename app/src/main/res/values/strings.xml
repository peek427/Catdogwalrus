<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Catdogwalrus</string>
    <string name="hello_world">Hello world!</string>
    <string name="action_settings">Settings</string>
    <string name="title_activity_chapter_menu">ChapterMenu</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="text_fragment">Lesson text fragment</string>
    <string name="code_fragment">Source code fragment</string>
    <string name="next_button">Next</string>
    <string name="back_button">Back</string>

    <!-- Strings for code, Lesson 1.1 -->

    <string name="high_score">catdogwalrushighscore</string>
    <string name="Hello_world_test">    #include &lt;iostream> \n\n
    int main()\n
    {\n
	    std::cout &lt;&lt; "Hello World!\n";\n
	    return 0;\n
    }</string>

    <!-- Lesson 1.1 Strings -->
    <string name="lesson1_1_1">        Let’s talk about variables.If you have ever taken a math class you have probably seen variables of some kind. Equations, for example, are made up of variables, or letters that represent numbers you pick.$</string>
    <string name="lesson1_1_2">        In programming you have variables just like this but instead of the variables only being used for numbers you can use them to represent almost anything!</string>
    <string name="lesson1_1_3">        The most common variable types are:\n
    Int\n
    Double\n
    Char\n
    String\n
    Bool\n</string>
    <string name="lesson1_1_4">        Int is used to represent an integer, which is a whole number.</string>
    <string name="lesson1_1_5">        Double is used when you want to represent a decimal value.</string>
    <string name="lesson1_1_6">        Char is used to represent a single character. This can be a letter or symbol from the keyboard. You use single quotes around the character to show it is a single character.</string>
    <string name="lesson1_1_7">        Next we talk about string. String is how we show a series of characters that are connected. This is basically a strange way of saying a sentence. You can type inside of double quotes to indicate it is a string.</string>
    <string name="lesson1_1_8">        Finally, the last major type we have is a bool. This is short for the word boolean. This type of value holds either true or false.</string>
    <string name="lesson1_1_9">        Think you can match the data with the type of variable you need? Lets go!</string>

    <!-- Lesson 1.1 Code Strings -->
    <string name="code1_1_1">        int main()\n
        {\n
	    int a, b;\n
	    int c = 15;\n
        }</string>
    <string name="code1_1_2">        int main()\n
        {\n
	    int a, b;\n
        int c = 15;\n
        double d = 10.2;\n
        }</string>
    <string name="code1_1_3">        int main()\n
        {\n
	    int a, b;\n
        int c = 15;\n
        double d = 10.2;\n
        char e = ‘e’;\n
        }</string>
    <string name="code1_1_4">        int main()\n
        {\n
        int a, b;\n
        int c = 15;\n
        double d = 10.2;\n
        char e = ‘E’;\n
        string f = “This string is cool!!! ”;\n
        }</string>
    <string name="code1_1_5">        int main()\n
        {\n
        int a;\n
        int c = 15;\n
        double d = 10.2;\n
        char e = ‘E’;\n
        string f = “This string is cool!!! ”;\n
        bool g = true;\n
        }</string>


    <!-- Lesson 1.2 Strings -->
        <string name="lesson1_2_1">
        So, now you know some of the types of variables you can create, but now what do you do with them?
        </string>
        <string name="lesson1_2_2">
        We will start with int and double, since these will be most familiar to you!
   </string>
        <string name="lesson1_2_3">
        To start, we will declare the variables.  Declaring a variable means giving it a name and a type.
        </string>
    +   <string name="lesson1_2_4">
        You already know some of the types of variables you can create, but now what do you do with them?
+       </string>
        <string name="lesson1_2_5">
       Last lesson we used single letters as variable names, but really it can be anything you want!  It just has to start with a letter and have valid characters for the language.
       Typically, you want to name your variables something meaningful, so we can keep track of what it is representing.
       </string>
        <string name="lesson1_2_6">
        So now that we have named them, lets do simple addition!
        </string>
        <string name="lesson1_2_7">
        After this simple expression, our variable whole_num now has 16 assigned to it, and our variable decimal_num has 16.5 in it.
        </string>
        <string name="lesson1_2_8">
        You may be wondering, what is so different about int and double? Lets say we change out some of the numbers.
        </string>
        <string name="lesson1_2_9">
        These 2 equations may look the same, but when adding or subtracting integers you lose the decimal. It does not round, but rather chops it
        off like it was never there! This is called truncating.
        </string>
        <string name="lesson1_2_10">
        So, while decimal_num holds 16.5 like you would expect, whole_num still holds 16 because the decimal was removed.
        </string>
        <string name="lesson1_2_11">
        This concept of truncating applies to subtraction, multiplication, and division as well. Let’s practice!
        </string>

       <!-- Lesson 1.2 Code Strings -->

        <string name = "code1_2_1">
        int main()\n
        {\n
        int whole_num;\n
        double decimal_num;\n
        }
    </string>
        <string name = "code1_2_2">
        int main()\n
        {\n
        int whole_num;\n
        double decimal_num;\n\n
        whole_num = 10 + 6;\n
        decimal_num = 10.2 + 6.3;\n
       }
   </string>
        <string name = "code1_2_3">
        int main()\n
        {\n
       int whole_num;\n
       double decimal_num;\n\n
        whole_num = 10 + 6.5;\n
       decimal_num = 10 + 6.5;\n
        }    </string>

    <string name="about_us">Thanks for checking out CATDOGWALRUS! This app is meant to
        aid anyone who wants to learn how to program. We start from the ground up
        using hands on games that could hopefully even teach your grandma the core concepts of
        programming. Enjoy.</string>
    <string name="title_activity_control_minigame">ControlMinigame</string>

    <!-- Lesson 1.3 String -->
    <string name = "lesson1_3_1">  Lesson 1.3 </string>
    <string name = "lesson1_3_2">  Lesson 1.3.2 </string>
    <string name = "lesson1_3_3">  Lesson 1.3.3 </string>


    <!-- Control minigame strings -->
    <!-- wr stands for winning red, wg stands for winning green, lg / lr stand for losing -->

    <!-- Structure 1 -->
    <string name="wr1">(int x=0; x&lt;5; x++)</string>
    <string name="wg1">counter++;</string>
    <string name="lg1_1">counter=5;</string>
    <string name="lg1_2">counter+1;</string>
    <string name="lr1_1">(int x=0; x=5; x++)</string>
    <string name="lr1_2">(counter == 5)</string>
    <string name="lr1_3">(counter)</string>

    <!-- Structure 2 -->
    <string name="wr2">(number != 3)</string>
    <string name="wg2">walrus = false;</string>
    <string name="lg2_1">walrus = 3;</string>
    <string name="lg2_2">false = walrus;</string>
    <string name="lr2_1">(int x=0; x&lt;3; x++)</string>
    <string name="lr2_2">(3)</string>
    <string name="lr2_3">(!number)</string>

    <!-- Structure 3 -->
    <string name="wr3">(number &lt; 0)</string>
    <string name="wg3">number++;</string>
    <string name="lg3_1">-number = +number;</string>
    <string name="lg3_2">number = 0;</string>
    <string name="lr3_1">(number == false)(</string>
    <string name="lr3_2">(0 - number)</string>
    <string name="lr3_3">(number &gt; 0)</string>

    <!-- Structure 4 -->
    <string name="wr4">(number &lt; 0)</string>
    <string name="wg4">number = 0;\nelse\nnumber=1;</string>
    <string name="lg4_1">number = 0 else number = 1;</string>
    <string name="lg4_2">number = 0;</string>
    <string name="lr4_1">(number !0)</string>
    <string name="lr4_2">(0 &lt; number)</string>
    <string name="lr4_3">(int x=0; x!=-1; x++)</string>

    <!-- Structure 5 -->
    <string name="wr5">(int x=0; x&lt;10; x++)</string>
    <string name="wg5">number+=2;</string>
    <string name="lg5_1">2*10;</string>
    <string name="lg5_2">number+2;</string>
    <string name="lr5_1">(x==0; x&lt;10; x)</string>
    <string name="lr5_2">(number != 10)</string>
    <string name="lr5_3">(number+2)</string>



</resources>
